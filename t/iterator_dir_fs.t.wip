#!perl

use 5.006;
use strict;
use warnings;
use autodie;

use Test::More 0.88;
use Test::TempDir::Tiny;

use Cwd qw(cwd);
use Fcntl ':mode';

use lib qw(.);

main();

sub main {
    require_ok('bin/dcmp') or BAIL_OUT();

    note('setup configuration for tests with empty @dirs');
    my $basedir = cwd();
    my $tmpdir = tempdir();

    chdir $tmpdir;
    open my $fh, '>', 'a.txt';
    close $fh;

    open $fh, '>', 'b.txt';
    print $fh "hello world\n";
    close $fh;
    my $file_size = -s 'b.txt';

    mkdir 'c';

    symlink 'a.txt', 'd.txt';

    chdir $basedir;

    my $chdir = sub {
        App::dcmp::_chdir($tmpdir, @_);
    };

    my $collect_file_info = sub {
        App::dcmp::_collect_file_info(@_);
    };

    my @dirs;

    my $it = App::dcmp::_iterator_dir_fs($chdir, $collect_file_info, undef, \@dirs);
    is(ref $it, ref sub {}, '_iterator_dir_fs() returns a sub');

    #
    note('first file info');
    my $file_info = $it->();
    is(ref $file_info, ref [], 'file info is an array ref');
    is(scalar @{ $file_info }, 3, '... consisting of three values');
    is(${ $file_info }[0], 'a.txt', '... the file name');
    like(${$file_info}[1], qr{ ^ [0-9]+ $ }xsm, '... the mode');
    ok(S_ISREG(${$file_info}[1]), '... which is from a file');
    is(${$file_info}[2], 0, '... the file size');

    #
    note('second file info');
    $file_info = $it->();
    is(ref $file_info, ref [], 'file info is an array ref');
    is(scalar @{ $file_info }, 3, '... consisting of three values');
    is(${ $file_info }[0], 'b.txt', '... the file name');
    like(${$file_info}[1], qr{ ^ [0-9]+ $ }xsm, '... the mode');
    ok(S_ISREG(${$file_info}[1]), '... which is from a file');
    is(${$file_info}[2], $file_size, '... the file size');

    #
    note('third file info');
    $file_info = $it->();
    is(ref $file_info, ref [], 'file info is an array ref');
    is(scalar @{ $file_info }, 2, '... consisting of two values');
    is(${ $file_info }[0], 'c', '... the file name');
    like(${$file_info}[1], qr{ ^ [0-9]+ $ }xsm, '... the mode');
    ok(S_ISDIR(${$file_info}[1]), '... which is from a directory');

    #
    note('fourth file info');
    $file_info = $it->();
    is(ref $file_info, ref [], 'file info is an array ref');
    is(scalar @{ $file_info }, 3, '... consisting of three values');
    is(${ $file_info }[0], 'd.txt', '... the file name');
    like(${$file_info}[1], qr{ ^ [0-9]+ $ }xsm, '... the mode');
    ok(S_ISLNK(${$file_info}[1]), '... which is from a symlink');
    is(${$file_info}[2], 'a.txt', '... the links target');

    #
    note('setup tests for 26 directories in @dir');
    chdir $tmpdir;
    @dirs = 'a' .. 'z';
    for my $d ( @dirs ) {
        mkdir $d;
        chdir $d;
    }

    open $fh, '>', 'AA.txt';
    close $fh;

    open $fh, '>', 'BB.txt';
    print $fh "hello world\n";
    close $fh;
    $file_size = -s 'BB.txt';

    mkdir 'CC';

    symlink 'AA.txt', 'DD.txt';

    chdir $basedir;

    $it = App::dcmp::_iterator_dir_fs($chdir, $collect_file_info, undef, \@dirs);
    is(ref $it, ref sub {}, '_iterator_dir_fs() returns a sub');

    #
    note('first file info');
    $file_info = $it->();
    is(ref $file_info, ref [], 'file info is an array ref');
    is(scalar @{ $file_info }, 3, '... consisting of three values');
    is(${ $file_info }[0], 'AA.txt', '... the file name');
    like(${$file_info}[1], qr{ ^ [0-9]+ $ }xsm, '... the mode');
    ok(S_ISREG(${$file_info}[1]), '... which is from a file');
    is(${$file_info}[2], 0, '... the file size');

    #
    note('second file info');
    $file_info = $it->();
    is(ref $file_info, ref [], 'file info is an array ref');
    is(scalar @{ $file_info }, 3, '... consisting of three values');
    is(${ $file_info }[0], 'BB.txt', '... the file name');
    like(${$file_info}[1], qr{ ^ [0-9]+ $ }xsm, '... the mode');
    ok(S_ISREG(${$file_info}[1]), '... which is from a file');
    is(${$file_info}[2], $file_size, '... the file size');

    #
    note('third file info');
    $file_info = $it->();
    is(ref $file_info, ref [], 'file info is an array ref');
    is(scalar @{ $file_info }, 2, '... consisting of two values');
    is(${ $file_info }[0], 'CC', '... the file name');
    like(${$file_info}[1], qr{ ^ [0-9]+ $ }xsm, '... the mode');
    ok(S_ISDIR(${$file_info}[1]), '... which is from a directory');

    #
    note('fourth file info');
    $file_info = $it->();
    is(ref $file_info, ref [], 'file info is an array ref');
    is(scalar @{ $file_info }, 3, '... consisting of three values');
    is(${ $file_info }[0], 'DD.txt', '... the file name');
    like(${$file_info}[1], qr{ ^ [0-9]+ $ }xsm, '... the mode');
    ok(S_ISLNK(${$file_info}[1]), '... which is from a symlink');
    is(${$file_info}[2], 'AA.txt', '... the links target');

    #
    note('ignore some dirs');
    $tmpdir = tempdir();

    chdir $tmpdir;

    mkdir 'a';
    mkdir 'b';
    mkdir 'c';

    open $fh, '>', 'd.txt';
    close $fh;

    chdir $basedir;

    $chdir = sub {
        App::dcmp::_chdir($tmpdir, @_);
    };

    undef @dirs;

    for my $state (0 .. 3) {
        my @ignore = $state == 0 ? ()
                   : $state == 1 ? ('a')
                   : $state == 2 ? ('a', 'b')
                   : $state == 3 ? ('a', 'b', 'd.txt')
                   : BAIL_OUT 'internal error';

        if ( !@ignore ) {
            note(q{### @ignore = ()});
        }
        else {
            note(q{### @ignore = ('} . join(q{', '}, @ignore) . q{')});
        }

        my $it = App::dcmp::_iterator_dir_fs($chdir, $collect_file_info, \@ignore, \@dirs);
        is(ref $it, ref sub {}, '_iterator_dir_fs() returns a sub');

        #
        note('a');
        if ( $state == 0 ) {
            $file_info = $it->();
            is(ref $file_info, ref [], 'file info is an array ref');
            is(scalar @{ $file_info }, 2, '... consisting of three values');
            is(${ $file_info }[0], 'a', '... the file name');
            like(${$file_info}[1], qr{ ^ [0-9]+ $ }xsm, '... the mode');
            ok(S_ISDIR(${$file_info}[1]), '... which is from a directory');
        }

        if ( $state < 2 ) {
            note('b');
            $file_info = $it->();
            is(ref $file_info, ref [], 'file info is an array ref');
            is(scalar @{ $file_info }, 2, '... consisting of three values');
            is(${ $file_info }[0], 'b', '... the file name');
            like(${$file_info}[1], qr{ ^ [0-9]+ $ }xsm, '... the mode');
            ok(S_ISDIR(${$file_info}[1]), '... which is from a directory');
        }

        note('c');
        $file_info = $it->();
        is(ref $file_info, ref [], 'file info is an array ref');
        is(scalar @{ $file_info }, 2, '... consisting of three values');
        is(${ $file_info }[0], 'c', '... the file name');
        like(${$file_info}[1], qr{ ^ [0-9]+ $ }xsm, '... the mode');
        ok(S_ISDIR(${$file_info}[1]), '... which is from a directory');

        if ( $state < 3 ) {
            note('d.txt');
            $file_info = $it->();
            is(ref $file_info, ref [], 'file info is an array ref');
            is(scalar @{ $file_info }, 3, '... consisting of three values');
            is(${ $file_info }[0], 'd.txt', '... the file name');
            like(${$file_info}[1], qr{ ^ [0-9]+ $ }xsm, '... the mode');
            ok(S_ISREG(${$file_info}[1]), '... which is from a file');
            is(${$file_info}[2], 0, '... the file size');
        }

        note('exhausted');
        is($it->(), undef, 'iterator is exhausted');
    }

    #
    done_testing();

    exit 0;
}

# vim: ts=4 sts=4 sw=4 et: syntax=perl

#!perl

use 5.006;
use strict;
use warnings;
use autodie;

use Test::Fatal;
use Test::More 0.88;
use Test::TempDir::Tiny;

use Cwd qw(cwd);
use Digest::MD5;

use lib qw(.);

main();

sub main {
    require_ok('bin/dcmp') or BAIL_OUT();

    my $basedir = cwd();
    my $tmpdir = tempdir();

    my @dirs;

    my $chdir = sub { App::dcmp::_chdir(File::Spec->catdir($tmpdir, 'abc'), @_) };

    like(exception { App::dcmp::_compare_file_record_fs($chdir, \@dirs, 'file.txt', undef, undef)}, qr{ ^ \QCannot chdir to $tmpdir\E }xsm, '_chdir throws an error if basedir does not exist');

    mkdir File::Spec->catdir($tmpdir, 'abc');

    like(exception { App::dcmp::_compare_file_record_fs($chdir, \@dirs, 'file.txt', undef, undef)}, qr{ ^ \QCannot read file file.txt in $tmpdir\E }xsm, '_compare_file_record_fs throws an error if the file cannot be read');

    open my $fh, '>', File::Spec->catfile($tmpdir, 'abc', 'file.txt');
    print $fh "hello world\n";
    close $fh;

    my $md5 = Digest::MD5->new();
    $md5->add("hello world\n");
    my $md5_sum = $md5->hexdigest();

    is(App::dcmp::_compare_file_record_fs($chdir, \@dirs, 'file.txt', lc $md5_sum, undef), 1, '_compare_file_record_fs returns 1 if the file matches the lowercase md5 sum');
    is(App::dcmp::_compare_file_record_fs($chdir, \@dirs, 'file.txt', uc $md5_sum, undef), 1, '_compare_file_record_fs returns 1 if the file matches the uppercase md5 sum');
    is(App::dcmp::_compare_file_record_fs($chdir, \@dirs, 'file.txt', 'not a md5 sum', undef), undef, '_compare_file_record_fs returns undef if the file does not match the md5 sum');

    #
    done_testing();

    exit 0;
}

# vim: ts=4 sts=4 sw=4 et: syntax=perl

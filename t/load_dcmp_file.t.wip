#!perl

use 5.006;
use strict;
use warnings;
use autodie;

use Test::Fatal;
use Test::More 0.88;
use Test::TempDir::Tiny;

use File::Spec;
use Fcntl ':mode';

#use lib qw(.);

main();

sub main {
    require_ok('bin/dcmp') or BAIL_OUT();

    my $nonexisting_file = File::Spec->catfile(tempdir(), 'nonexistingfile.txt');
    like(exception { App::dcmp::_load_dcmp_file($nonexisting_file); }, qr{ ^ \QCannot read file $nonexisting_file: \E }xsm, '_load_dcmp_file throws an exception if the dcmp file cannot be read');

    my $dcmp_file = File::Spec->catfile(tempdir(), 'test.dcmp');

    #
    note('invalid enty in dcmp file');

    open my $fh, '>', $dcmp_file;
    print $fh <<'RECORD_FILE';
INVALID entry
RECORD_FILE
    close $fh;

    like( exception { App::dcmp::_load_dcmp_file($dcmp_file) } , qr{ ^ \QInvalid entry on line 1 in file $dcmp_file\E $ }xsm, '_load_dcmp_file() throws an exception if the dcmp file contains an invalid entry');

    #
    note('to many -DIR in dcmp file');

    open $fh, '>', $dcmp_file;
    print $fh <<'RECORD_FILE';
DIR dir
FILE file2.txt 0 d41d8cd98f00b204e9800998ecf8427e
-DIR
FILE file.txt 12 6f5902ac237024bdd0c176cb93063dc4
-DIR
LINK invalid_link.txt invalid_target.txt
LINK valid_link.txt file.txt
-DIR
RECORD_FILE
    close $fh;

    like(exception { App::dcmp::_load_dcmp_file($dcmp_file); }, qr{ ^ \QUnbalanced -DIR on line 5 in file $dcmp_file\E $ }xsm, q{_load_dcmp_file() throws an exception if there are to many '-DIR'});

    #
    note('missing -DIR at end in dcmp file');

    open $fh, '>', $dcmp_file;
    print $fh <<'RECORD_FILE';
DIR dir
FILE file2.txt 0 d41d8cd98f00b204e9800998ecf8427e
-DIR
FILE file.txt 12 6f5902ac237024bdd0c176cb93063dc4
LINK invalid_link.txt invalid_target.txt
LINK valid_link.txt file.txt
RECORD_FILE
    close $fh;

    like(exception { App::dcmp::_load_dcmp_file($dcmp_file); }, qr{ ^ \QUnbalanced -DIR at end of file $dcmp_file\E $ }xsm, q{_load_dcmp_file() throws an exception if there are to few '-DIR'});

    #
    note('duplicate file in directory');

    open $fh, '>', $dcmp_file;
    print $fh <<'RECORD_FILE';
DIR dir
FILE file2.txt 0 d41d8cd98f00b204e9800998ecf8427e
-DIR
FILE file.txt 12 6f5902ac237024bdd0c176cb93063dc4
FILE file.txt 12 6f5902ac237024bdd0c176cb93063dc4
LINK invalid_link.txt invalid_target.txt
LINK valid_link.txt file.txt
-DIR
RECORD_FILE
    close $fh;

    like(exception { App::dcmp::_load_dcmp_file($dcmp_file); }, qr{ ^ \QDuplicate entry for file.txt at line 5 in file $dcmp_file\E $}xsm, '_load_dcmp_file() throws an exception if there are multiple files with the same name in the same directory');

    #
    note('invalid dir entry');

    open $fh, '>', $dcmp_file;
    print $fh <<'RECORD_FILE';
DIR dir invalid
-DIR
-DIR
RECORD_FILE
    close $fh;

    like(exception { App::dcmp::_load_dcmp_file($dcmp_file); }, qr{ ^ \QIncorrect number of arguments for DIR entry at line 1 in file $dcmp_file\E $ }xsm, '_load_dcmp_file() throws an exception if there is a DIR entry with invalid arguments');

    #
    open $fh, '>', $dcmp_file;
    print $fh <<'RECORD_FILE';
DIR
-DIR
-DIR
RECORD_FILE
    close $fh;

    like(exception { App::dcmp::_load_dcmp_file($dcmp_file); }, qr{ ^ \QIncorrect number of arguments at line 1 in file $dcmp_file\E $ }xsm, '_load_dcmp_file() throws an exception if there is a DIR entry with no arguments');

    #
    note('invalid file entry');

    open $fh, '>', $dcmp_file;
    print $fh <<'RECORD_FILE';
DIR dir
FILE file2.txt 0 d41d8cd98f00b204e9800998ecf8427e invalid
-DIR
-DIR
RECORD_FILE
    close $fh;

    like(exception { App::dcmp::_load_dcmp_file($dcmp_file); }, qr{ ^ \QIncorrect number of arguments for FILE entry at line 2 in file $dcmp_file\E $ }xsm, '_load_dcmp_file() throws an exception if there is a FILE entry with to many arguments');

    open $fh, '>', $dcmp_file;
    print $fh <<'RECORD_FILE';
DIR dir
FILE file2.txt 0
-DIR
-DIR
RECORD_FILE
    close $fh;

    like(exception { App::dcmp::_load_dcmp_file($dcmp_file); }, qr{ ^ \QIncorrect number of arguments for FILE entry at line 2 in file $dcmp_file\E $ }xsm, '_load_dcmp_file() throws an exception if there is a FILE entry with to few arguments');

    open $fh, '>', $dcmp_file;
    print $fh <<'RECORD_FILE';
DIR dir
FILE file2.txt
-DIR
-DIR
RECORD_FILE
    close $fh;

    like(exception { App::dcmp::_load_dcmp_file($dcmp_file); }, qr{ ^ \QIncorrect number of arguments for FILE entry at line 2 in file $dcmp_file\E $ }xsm, '_load_dcmp_file() throws an exception if there is a FILE entry with to few arguments');

    #
    note('invalid link entry');

    open $fh, '>', $dcmp_file;
    print $fh <<'RECORD_FILE';
DIR dir
FILE file2.txt 0 d41d8cd98f00b204e9800998ecf8427e
LINK valid_link.txt file.txt invalid
-DIR
-DIR
RECORD_FILE
    close $fh;

    like(exception { App::dcmp::_load_dcmp_file($dcmp_file); }, qr{ ^ \QIncorrect number of arguments for LINK entry at line 3 in file $dcmp_file\E $ }xsm, '_load_dcmp_file() throws an exception if there is a LINK entry with to many arguments');

    open $fh, '>', $dcmp_file;
    print $fh <<'RECORD_FILE';
DIR dir
FILE file2.txt 0 d41d8cd98f00b204e9800998ecf8427e
LINK valid_link.txt
-DIR
-DIR
RECORD_FILE
    close $fh;

    like(exception { App::dcmp::_load_dcmp_file($dcmp_file); }, qr{ ^ \QIncorrect number of arguments for LINK entry at line 3 in file $dcmp_file\E $ }xsm, '_load_dcmp_file() throws an exception if there is a LINK entry with to few arguments');

    #
    note('load valid dcmp file');

    open $fh, '>', $dcmp_file;
    print $fh <<'RECORD_FILE';
LINK invalid_link.txt invalid_target.txt
DIR dir
FILE file2.txt 0 d41d8cd98f00b204e9800998ecf8427e
-DIR
LINK valid_link.txt file.txt
FILE file.txt 12 6f5902ac237024bdd0c176cb93063dc4
-DIR
RECORD_FILE
    close $fh;

    for my $state (0 .. 3) {
        my @ignore = $state == 0 ? ()
                   : $state == 1 ? ('file.txt')
                   : $state == 2 ? ('file.txt', 'dir')
                   : $state == 3 ? ('file.txt', 'dir', 'valid_link.txt')
                   : BAIL_OUT 'internal error';

        if ( !@ignore ) {
            note(q{### @ignore = ()});
        }
        else {
            note(q{### @ignore = ('} . join(q{', '}, @ignore) . q{')});
        }

        my $iterator_dir_record = App::dcmp::_load_dcmp_file($dcmp_file, \@ignore);
        is(ref $iterator_dir_record, ref sub {}, '_load_records() returns a sub');

        my @dirs = qw(no_such_dir);
        my $it = $iterator_dir_record->(\@dirs);
        is(ref $it, ref sub {}, '... the returned sub returns a sub');
        my $x_ref = $it->();
        is($it->(), undef, '... which returns undef for a non-existing path');

        #
        note(q{check 'dir'});
        @dirs = qw(dir);
        $it = $iterator_dir_record->(\@dirs);
        is(ref $it, ref sub {}, '... the returned sub returns a sub');

        if ( $state < 2 ) {
            $x_ref = $it->();
            is(ref $x_ref, ref [], '... the sub returned from the sub returns an array ref');
            is(scalar @{ $x_ref }, 4, '... with 4 elements');
            is(${ $x_ref }[0], 'file2.txt', '... correct name');
            is(${ $x_ref }[1], S_IFREG, '... correct mode');
            is(${ $x_ref }[2], 0, '... correct size');
            is(${ $x_ref }[3], 'd41d8cd98f00b204e9800998ecf8427e', '... correct md5');

        }
        is($it->(), undef, '... calling it again returns undef');

        #
        note(q{check '.'});
        @dirs = qw();
        $it = $iterator_dir_record->(\@dirs);
        is(ref $it, ref sub {}, '... the returned sub returns a sub');

        if ( $state < 2 ) {
            $x_ref = $it->();
            is(ref $x_ref, ref [], '... the sub returned from the sub returns an array ref');
            is(scalar @{ $x_ref }, 2, '... with 2 elements');
            is(${ $x_ref }[0], 'dir', '... correct name');
            is(${ $x_ref }[1], S_IFDIR, '... correct mode');
        }

        if ( $state == 0 ) {
            $x_ref = $it->();
            is(ref $x_ref, ref [], '... calling it again returns an array ref');
            is(scalar @{ $x_ref }, 4, '... with 4 elements');
            is(${ $x_ref }[0], 'file.txt', '... correct name');
            is(${ $x_ref }[1], S_IFREG, '... correct mode');
            is(${ $x_ref }[2], 12, '... correct size');
            is(${ $x_ref }[3], '6f5902ac237024bdd0c176cb93063dc4', '... correct md5');
        }

        $x_ref = $it->();
        is(ref $x_ref, ref [], '... calling it again returns an array ref');
        is(scalar @{ $x_ref }, 3, '... with 3 elements');
        is(${ $x_ref }[0], 'invalid_link.txt', '... correct name');
        is(${ $x_ref }[1], S_IFLNK, '... correct mode');
        is(${ $x_ref }[2], 'invalid_target.txt', '... correct target');

        if ( $state < 3 ) {
            $x_ref = $it->();
            is(ref $x_ref, ref [], '... calling it again returns an array ref');
            is(scalar @{ $x_ref }, 3, '... with 3 elements');
            is(${ $x_ref }[0], 'valid_link.txt', '... correct name');
            is(${ $x_ref }[1], S_IFLNK, '... correct mode');
            is(${ $x_ref }[2], 'file.txt', '... correct target');
        }

        is($it->(), undef, '... calling it again returns undef');
    }

    #
    done_testing();

    exit 0;
}

# vim: ts=4 sts=4 sw=4 et: syntax=perl

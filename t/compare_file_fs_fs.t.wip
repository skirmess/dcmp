#!perl

use 5.006;
use strict;
use warnings;
use autodie;

use Test::Fatal;
use Test::MockModule;
use Test::More 0.88;
use Test::TempDir::Tiny;

use File::Spec;

use lib qw(.);

main();

sub main {
    require_ok('bin/dcmp') or BAIL_OUT();

    my $tmpdir_l = tempdir();
    my $tmpdir_r = tempdir();

    my @dirs;

    my $chdir_l = sub { App::dcmp::_chdir(File::Spec->catdir($tmpdir_l, 'abc'), @_) };
    my $chdir_r = sub { App::dcmp::_chdir(File::Spec->catdir($tmpdir_r, 'def'), @_) };

    like(exception { App::dcmp::_compare_file_fs_fs($chdir_l, $chdir_r, \@dirs, 'file.txt', undef, undef)}, qr{ ^ \QCannot chdir to $tmpdir_l\E }xsm, 'left _chdir throws an error if basedir does not exist');

    mkdir File::Spec->catdir($tmpdir_l, 'abc');
    open my $fh, '>', File::Spec->catfile($tmpdir_l, 'abc', 'file.txt');
    close $fh;

    like(exception { App::dcmp::_compare_file_fs_fs($chdir_l, $chdir_r, \@dirs, 'file.txt', undef, undef)}, qr{ ^ \QCannot chdir to $tmpdir_r\E }xsm, 'right _chdir throws an error if basedir does not exist');

    #
    $tmpdir_l = tempdir();
    $tmpdir_r = tempdir();

    $chdir_l = sub { App::dcmp::_chdir($tmpdir_l, @_) };
    $chdir_r = sub { App::dcmp::_chdir($tmpdir_r, @_) };

    open $fh, '>', File::Spec->catfile($tmpdir_l, 'file.txt');
    print $fh "hello world\n";
    close $fh;

    open $fh, '>', File::Spec->catfile($tmpdir_r, 'file.txt');
    print $fh "hello world\n";
    close $fh;

    open $fh, '>', File::Spec->catfile($tmpdir_l, 'file2.txt');
    print $fh "hello world L\n";
    close $fh;

    open $fh, '>', File::Spec->catfile($tmpdir_r, 'file2.txt');
    print $fh "hello world R\n";
    close $fh;

    open $fh, '>', File::Spec->catfile($tmpdir_l, 'file3l.txt');
    print $fh "hello world L\n";
    close $fh;

    open $fh, '>', File::Spec->catfile($tmpdir_r, 'file3r.txt');
    print $fh "hello world R\n";
    close $fh;

    like(exception { App::dcmp::_compare_file_fs_fs($chdir_l, $chdir_r, \@dirs, 'file3l.txt', undef, undef)}, qr{ ^ \QCannot read file file3l.txt in $tmpdir_r: \E }xsm, '_compare_file_fs_fs throws an error if the left file cannot be read');
    like(exception { App::dcmp::_compare_file_fs_fs($chdir_l, $chdir_r, \@dirs, 'file3r.txt', undef, undef)}, qr{ ^ \QCannot read file file3r.txt in $tmpdir_l: \E }xsm, '_compare_file_fs_fs throws an error if the right file cannot be read');

    is(App::dcmp::_compare_file_fs_fs($chdir_l, $chdir_r, \@dirs, 'file.txt', undef, undef), 1, 'Identical file compare as identical');
    is(App::dcmp::_compare_file_fs_fs($chdir_l, $chdir_r, \@dirs, 'file2.txt', undef, undef), undef, 'Not identical file compare as not identical');

    #
    my $compare = Test::MockModule->new('App::dcmp', no_auto => 1);
    $compare->mock('compare', sub { return -1; });

    like(exception { App::dcmp::_compare_file_fs_fs($chdir_l, $chdir_r, \@dirs, 'file2.txt', undef, undef) }, qr{ ^ \QUnable to compare file file2.txt\E }xsm, '_compare_file_fs_fs throws an error if compare() returns a failure');

    #
    done_testing();

    exit 0;
}

# vim: ts=4 sts=4 sw=4 et: syntax=perl

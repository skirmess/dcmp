#!perl

use 5.006;
use strict;
use warnings;

use Test::More 0.88;

use Capture::Tiny qw(capture);
use File::Spec;

use lib qw(.);

main();

sub main {
    require_ok('bin/dcmp') or BAIL_OUT();

    note('constants');
    is(App::dcmp::FILE_ADDITIONAL(), 0, 'constant FILE_ADDITIONAL correctly defined');
    is(App::dcmp::FILE_MISSING(), 1, 'constant FILE_MISSING correctly defined');
    is(App::dcmp::FILE_TYPE_DIFFERS(), 2, 'constant FILE_TYPE_DIFFERS correctly defined');
    is(App::dcmp::FILE_TYPE_UNKNOWN(), 3, 'constant FILE_TYPE_UNKNOWN correctly defined');
    is(App::dcmp::FILE_CONTENT_DIFFERS(), 4, 'constant FILE_CONTENT_DIFFERS correctly defined');
    is(App::dcmp::LINK_TARGET_DIFFERS(), 5, 'constant LINK_TARGET_DIFFERS correctly defined');

    note('_print_changes');
    my $printer = App::dcmp::_print_changes();
    is(ref $printer, ref sub {}, '_print_changes() returns a sub');

    my ($stdout, $stderr, @result);
    my @dirs;
    my $expected_stdout;

    note('printer with empty path / FILE_ADDITIONAL');
    ($stdout, $stderr, @result) = capture { $printer->(App::dcmp::FILE_ADDITIONAL(), \@dirs, 'file.txt'); };
    is(scalar @result, 0, '... which returns nothing');
    $expected_stdout = "+ file.txt\n";
    is($stdout, $expected_stdout, '... prints the correct message to stdout');
    is($stderr, q{}, '... prints nothing to stderr');

    note('printer with one path element / FILE_MISSING');
    @dirs = ('dir1');
    ($stdout, $stderr, @result) = capture { $printer->(App::dcmp::FILE_MISSING(), \@dirs, 'file.txt'); };
    is(scalar @result, 0, '... which returns nothing');
    $expected_stdout = q{- } . File::Spec->catdir('dir1', 'file.txt') . "\n";
    is($stdout, $expected_stdout, '... prints the correct message to stdout');
    is($stderr, q{}, '... prints nothing to stderr');

    note('printer with two path element / FILE_TYPE_DIFFERS');
    @dirs = ('dir1', 'dir2');
    ($stdout, $stderr, @result) = capture { $printer->(App::dcmp::FILE_TYPE_DIFFERS(), \@dirs, 'file.txt'); };
    is(scalar @result, 0, '... which returns nothing');
    $expected_stdout = q{@ } . File::Spec->catdir('dir1', 'dir2', 'file.txt') . "\n";
    is($stdout, $expected_stdout, '... prints the correct message to stdout');
    is($stderr, q{}, '... prints nothing to stderr');

    note('printer with two path element / FILE_TYPE_UNKNOWN');
    @dirs = ('dir1', 'dir2');
    ($stdout, $stderr, @result) = capture { $printer->(App::dcmp::FILE_TYPE_UNKNOWN(), \@dirs, 'file.txt'); };
    is(scalar @result, 0, '... which returns nothing');
    $expected_stdout = q{? } . File::Spec->catdir('dir1', 'dir2', 'file.txt') . "\n";
    is($stdout, $expected_stdout, '... prints the correct message to stdout');
    is($stderr, q{}, '... prints nothing to stderr');

    note('printer with two path element / FILE_CONTENT_DIFFERS');
    @dirs = ('dir1', 'dir2');
    ($stdout, $stderr, @result) = capture { $printer->(App::dcmp::FILE_CONTENT_DIFFERS(), \@dirs, 'file.txt'); };
    is(scalar @result, 0, '... which returns nothing');
    $expected_stdout = q{M } . File::Spec->catdir('dir1', 'dir2', 'file.txt') . "\n";
    is($stdout, $expected_stdout, '... prints the correct message to stdout');
    is($stderr, q{}, '... prints nothing to stderr');

    note('printer with two path element / LINK_TARGET_DIFFERS');
    @dirs = ('dir1', 'dir2');
    ($stdout, $stderr, @result) = capture { $printer->(App::dcmp::LINK_TARGET_DIFFERS(), \@dirs, 'file.txt'); };
    is(scalar @result, 0, '... which returns nothing');
    $expected_stdout = q{L } . File::Spec->catdir('dir1', 'dir2', 'file.txt') . "\n";
    is($stdout, $expected_stdout, '... prints the correct message to stdout');
    is($stderr, q{}, '... prints nothing to stderr');


    done_testing();

    exit 0;
}

# vim: ts=4 sts=4 sw=4 et: syntax=perl


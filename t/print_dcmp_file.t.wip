#!perl

use 5.006;
use strict;
use warnings;
use autodie;

use Test::More 0.88;
use Test::TempDir::Tiny;

use Capture::Tiny qw(capture);
use Cwd qw(cwd);
use File::Spec;

use lib qw(.);

main();

sub main {
    require_ok('bin/dcmp') or BAIL_OUT();

    my $basedir = cwd();

    my $tmpdir = tempdir();
    chdir $tmpdir;

    open my $fh, '>', 'file.txt';
    print $fh "hello world\n";
    close $fh;
    my $file_size = -s 'file.txt';

    symlink 'file.txt', 'valid_link.txt';
    symlink 'invalid_target.txt', 'invalid_link.txt';

    mkdir 'dir';

    open $fh, '>', File::Spec->catfile('dir', 'file2.txt');
    close $fh;

    chdir $basedir;

    my $chdir = sub { return App::dcmp::_chdir($tmpdir, @_); };
    my $collect_file_info = sub { return App::dcmp::_collect_file_info_report(@_); };
    my $iterate_dir_fs = sub { return App::dcmp::_iterator_dir_fs($chdir, $collect_file_info, undef, @_); };

    my ($stdout, $stderr, @result);

    ($stdout, $stderr, @result) = capture { App::dcmp::_print_dcmp_file($iterate_dir_fs); };
    is(@result, 0, '_print_dcmp_file returns nothing');
    my @stdout = split /\n/, $stdout;

    is(@stdout, 7, '... prints 7 lines to stdout');
    my $i=0;
    is($stdout[$i++], 'DIR dir', '...DIR dir');
    is($stdout[$i++], 'FILE file2.txt 0 d41d8cd98f00b204e9800998ecf8427e', '... FILE file2.txt 0 d41d8cd98f00b204e9800998ecf8427e');
    is($stdout[$i++], '-DIR', '... -DIR');
    is($stdout[$i++], 'FILE file.txt 12 6f5902ac237024bdd0c176cb93063dc4', '... FILE file.txt 12 6f5902ac237024bdd0c176cb93063dc4');
    is($stdout[$i++], 'LINK invalid_link.txt invalid_target.txt', '... LINK invalid_link.txt invalid_target.txt');
    is($stdout[$i++], 'LINK valid_link.txt file.txt', '... LINK valid_link.txt file.txt');
    is($stdout[$i++], '-DIR', '... -DIR');

    is($stderr, q{}, '... prints nothing to stderr');

    #
    done_testing();

    exit 0;
}

# vim: ts=4 sts=4 sw=4 et: syntax=perl

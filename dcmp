#!/usr/bin/perl
#
# (c) 2002-2014 Sven Kirmess
#

use strict;
use warnings;
no warnings 'recursion';

use Cwd qw( getcwd );
use Fcntl ':mode';
use File::Compare;
use Getopt::Long;

# ----------------------------------------------------------
#

sub usage {
	print "usage: $0 [ -i <ignore> ... ] <dir> <dir>\n";
	exit 255;
}

my $rc                  = 0;
my @path                = ();
my @directoriesToIgnore = ();

# ----------------------------------------------------------
#

GetOptions( "i=s" => \@directoriesToIgnore );

if ( $#ARGV != 1 ) {
	usage();
}

my $lDirName = shift(@ARGV);
my $rDirName = shift(@ARGV);

opendir( my $lDirFH, $lDirName ) or die "$!: $lDirName\n";
opendir( my $rDirFH, $rDirName ) or die "$!: $rDirName\n";

sub ChdirToPath {
	my ($dirFH) = @_;

	chdir($dirFH) or die "$!\n";

	foreach my $dir (@path) {
		chdir($dir) or die "$!: Cannot chdir to " . $dir . " in " . getcwd() . "\n";
	}
}

sub CompareLink {
	my ($file) = @_;

	ChdirToPath($lDirFH);
	my $ldest = readlink($file);
	die "$!: " . $file . " in " . getcwd() . "\n" if ( !defined $ldest );

	ChdirToPath($rDirFH);
	my $rdest = readlink($file);
	die "$!: " . $file . " in " . getcwd() . "\n" if ( !defined $rdest );

	if ( $ldest eq $rdest ) {
		return 1;
	}

	return 0;
}

sub CompareFile {
	my ($file) = @_;

	my $lFH;
	my $rFH;

	ChdirToPath($lDirFH);
	if ( !open( $lFH, $file ) ) {
		die "$!: Cannot read file " . join( "/", $rDirName, @path, $file ) . "\n";
		return 0;
	}

	ChdirToPath($rDirFH);
	if ( !open( $rFH, $file ) ) {
		die "$!: Cannot read file " . join( "/", $rDirName, @path, $file ) . "\n";
		return 0;
	}

	my $rc = 0;
	if ( compare( $lFH, $rFH ) == 0 ) {
		$rc = 1;
	}

	if ( !close($lFH) ) {
		die "$!: Cannot read file " . join( "/", $lDirName, @path, $file ) . "\n";
		return 0;
	}

	if ( !close($rFH) ) {
		die "$!: Cannot read file " . join( "/", $rDirName, @path, $file ) . "\n";
		return 0;
	}

	return $rc;
}

sub ScanDir {

	my ( $dirFH, $dirName ) = @_;

	ChdirToPath($dirFH);

	my %content;

	my $dh;
	if ( opendir( $dh, "." ) ) {
		while ( my $entry = readdir($dh) ) {
			next if ( ( $entry eq '.' ) or ( $entry eq '..' ) );

			my $skipThis = 0;
			foreach my $id (@directoriesToIgnore) {
				if ( $entry eq $id ) {
					$skipThis = 1;
					last;
				}
			}

			if ($skipThis) {
				next;
			}

			my @lstat = lstat($entry);
			$content{$entry} = \@lstat;
		}
		closedir($dh) or die "$!: Could not read directory: " . join( "/", $dirName, @path ) . "\n";
	}
	else {
		die "$!: Could not read directory: " . join( "/", $dirName, @path ) . "\n";
	}

	return \%content;
}

sub ListLonelyTree {
	my ( $dirFH, $dirName, $c ) = @_;

	my $files = ScanDir( $dirFH, $dirName );

	foreach my $entry ( sort keys %{$files} ) {
		print $c. " " . join( "/", @path, $entry ) . "\n";

		if ( S_ISDIR( $files->{$entry}[2] ) ) {
			push( @path, $entry );
			ListLonelyTree(@_);
			pop(@path);
		}
	}
}

sub CompareDir {

	my $lFiles = ScanDir( $lDirFH, $lDirName );
	my $rFiles = ScanDir( $rDirFH, $rDirName );

	foreach my $entry ( sort keys %{ { %{$lFiles}, %{$rFiles} } } ) {

		if ( !defined $rFiles->{$entry} ) {

			# file is only present in the left tree

			print "+ " . join( "/", @path, $entry ) . "\n";
			$rc = 1;

			if ( S_ISDIR( $lFiles->{$entry}[2] ) ) {
				push( @path, $entry );
				ListLonelyTree( $lDirFH, $lDirName, "+" );
				pop(@path);
			}

			delete $lFiles->{$entry};
			next;
		}

		if ( !defined $lFiles->{$entry} ) {

			# file is only present in the right tree

			print "- " . join( "/", @path, $entry ) . "\n";
			$rc = 1;

			if ( S_ISDIR( $rFiles->{$entry}[2] ) ) {
				push( @path, $entry );
				ListLonelyTree( $rDirFH, $rDirName, "-" );
				pop(@path);
			}

			delete $rFiles->{$entry};
			next;
		}

		# file is present in both locations
		if ( S_IFMT( $lFiles->{$entry}[2] ) != S_IFMT( $rFiles->{$entry}[2] ) ) {

			# file is not the same filetype
			print "@ " . join( "/", @path, $entry ) . "\n";
			$rc = 1;

			if ( S_ISDIR( $lFiles->{$entry}[2] ) ) {
				push( @path, $entry );
				ListLonelyTree( $lDirFH, $lDirName, "+" );
				pop(@path);
			}
			elsif ( S_ISDIR( $rFiles->{$entry}[2] ) ) {
				push( @path, $entry );
				ListLonelyTree( $rDirFH, $rDirName, "-" );
				pop(@path);
			}

		}
		elsif ( S_ISLNK( $lFiles->{$entry}[2] ) ) {

			# both are symlinks
			if ( !CompareLink($entry) ) {
				print "L " . join( "/", @path, $entry ) . "\n";
				$rc = 1;
			}
		}
		elsif ( S_ISDIR( $lFiles->{$entry}[2] ) ) {

			# both are directories

			push( @path, $entry );
			CompareDir();
			pop(@path);
		}
		elsif ( S_ISREG( $lFiles->{$entry}[2] ) ) {

			# both are regular files
			if ( !CompareFile($entry) ) {
				print "M " . join( "/", @path, $entry ) . "\n";
				$rc = 1;
			}
		}
		else {
			print "? " . join( "/", @path, $entry ) . "\n";
			$rc = 1;
		}

		delete $lFiles->{$entry};
		delete $rFiles->{$entry};
	}
}

CompareDir();

exit $rc;
